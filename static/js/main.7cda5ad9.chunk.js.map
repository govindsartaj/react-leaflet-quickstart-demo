{"version":3,"sources":["components/GeoLocate.js","components/BigMap.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","margin","spacing","width","height","zIndex","position","button","marginTop","cursor","GeoLocate","props","classes","className","Button","variant","color","endIcon","onClick","navigator","geolocation","getCurrentPosition","result","parentGeolocateFunction","MyComponent","useMap","flyTo","newLocation","duration","BigMap","geo","newPosition","coords","latitude","longitude","setState","state","zoom","this","MapContainer","ref","myRef","center","zoomControl","minZoom","TileLayer","url","attribution","Marker","Popup","TextField","required","id","label","value","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kZAKMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,SAAU,OACV,QAAS,CACPC,OAAQJ,EAAMK,QAAQ,GACtBC,MAAON,EAAMK,QAAQ,IACrBE,OAAQP,EAAMK,QAAQ,IAExBG,OAAQ,IACRC,SAAU,SAGZC,OAAQ,CACNC,UAAW,MACXC,OAAQ,eAIG,SAASC,EAAUC,GAChC,IAAMC,EAAUjB,IAQhB,OACE,qBAAKkB,UAAWD,EAAQd,KAAxB,SACE,cAACgB,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNH,UAAWD,EAAQL,OACnBU,QAAS,cAAC,IAAD,IACTC,QAbsB,WAC1BC,UAAUC,YAAYC,oBAAmB,SAACC,GACxCX,EAAMY,wBAAwBD,OAM9B,yB,aC5BN,SAASE,EAAYb,GAGnB,OAFYc,cACRC,MAAM,CAACf,EAAMgB,YAAY,GAAIhB,EAAMgB,YAAY,IAAK,GAAI,CAAEC,SAAU,IACjE,K,IAqDMC,E,kDAjDb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAQRY,wBAA0B,SAACO,GACzB,IAAIC,EAAc,CAACD,EAAIE,OAAOC,SAAUH,EAAIE,OAAOE,WAGnD,OAFA,EAAKC,SAAS,CAAE7B,SAAS,GAAD,OAAMyB,KAEvBA,GAVP,EAAKK,MAAQ,CACX9B,SAAU,CAAC,QAAS,OACpB+B,KAAM,IALS,E,qDAiBjB,OACE,sBAAKxB,UAAU,MAAf,UACE,cAAC,EAAD,CAAWU,wBAAyBe,KAAKf,0BACzC,eAACgB,EAAA,EAAD,CACEC,IAAKF,KAAKG,MACVC,OAAQJ,KAAKF,MAAM9B,SACnB+B,KAAMC,KAAKF,MAAMC,KACjBM,aAAa,EACbC,QAAS,EALX,UAOE,cAACpB,EAAD,CAAaG,YAAaW,KAAKF,MAAM9B,WACrC,cAACuC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAEd,cAACC,EAAA,EAAD,CAAQ1C,SAAUgC,KAAKF,MAAM9B,SAA7B,SACE,eAAC2C,EAAA,EAAD,mCACuB,uBADvB,gCAKJ,cAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,GAAG,oBACHC,MAAM,WACNC,MAAOhB,KAAKF,MAAM9B,kB,GA3CPiD,IAAMC,WCFZC,MARf,WACE,OACE,qBAAK5C,UAAU,MAAf,SACE,cAAC,EAAD,OCMS6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7cda5ad9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport MyLocationIcon from \"@material-ui/icons/MyLocation\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(2),\r\n      width: theme.spacing(20),\r\n      height: theme.spacing(5),\r\n    },\r\n    zIndex: 500,\r\n    position: \"fixed\",\r\n  },\r\n\r\n  button: {\r\n    marginTop: \"1em\",\r\n    cursor: \"pointer\",\r\n  },\r\n}));\r\n\r\nexport default function GeoLocate(props) {\r\n  const classes = useStyles();\r\n\r\n  const handleLocateMeClick = () => {\r\n    navigator.geolocation.getCurrentPosition((result) => {\r\n      props.parentGeolocateFunction(result);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className={classes.button}\r\n        endIcon={<MyLocationIcon />}\r\n        onClick={handleLocateMeClick}\r\n      >\r\n        Locate me\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from \"react-leaflet\";\r\nimport \"../style/Map.css\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport Geolocate from \"./GeoLocate\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nfunction MyComponent(props) {\r\n  const map = useMap();\r\n  map.flyTo([props.newLocation[0], props.newLocation[1]], 17, { duration: 5 });\r\n  return null;\r\n}\r\n\r\nclass BigMap extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      position: [51.5074, 0.1278],\r\n      zoom: 17,\r\n    };\r\n  }\r\n\r\n  parentGeolocateFunction = (geo) => {\r\n    var newPosition = [geo.coords.latitude, geo.coords.longitude];\r\n    this.setState({ position: [...newPosition] });\r\n\r\n    return newPosition;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"map\">\r\n        <Geolocate parentGeolocateFunction={this.parentGeolocateFunction} />\r\n        <MapContainer\r\n          ref={this.myRef}\r\n          center={this.state.position}\r\n          zoom={this.state.zoom}\r\n          zoomControl={false}\r\n          minZoom={5}\r\n        >\r\n          <MyComponent newLocation={this.state.position} />\r\n          <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          />\r\n          <Marker position={this.state.position}>\r\n            <Popup>\r\n              A pretty CSS3 popup. <br /> Easily customizable.\r\n            </Popup>\r\n          </Marker>\r\n        </MapContainer>\r\n        <TextField\r\n          required\r\n          id=\"standard-required\"\r\n          label=\"Required\"\r\n          value={this.state.position}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BigMap;\r\n","import \"./App.css\";\nimport BigMap from \"./components/BigMap\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BigMap />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}